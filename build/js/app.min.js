/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/js/app.js":
/*!***********************!*\
  !*** ./src/js/app.js ***!
  \***********************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\nconst game = document.getElementById(\"game\");\r\nconst startingField = document.getElementById(\"startingField\");\r\nconst recordField = document.getElementById(\"recordField\");\r\nconst resetRecord = document.getElementById(\"resetRecord\");\r\nconst setMin = document.getElementById(\"setMin\");\r\nconst setMax = document.getElementById(\"setMax\");\r\nconst guessInput = document.getElementById(\"guessInput\");\r\nconst startButton = document.getElementById(\"startButton\");\r\nconst guessButton = document.getElementById(\"guessButton\");\r\nconst response = document.getElementById(\"response\");\r\nconst attemptsCounter = document.getElementById(\"attemptsCounter\");\r\nconst hint = document.getElementById(\"hint\");\r\nconst restartButton = document.getElementById(\"restartButton\");\r\n\r\n// Объявляем переменные для границ числа, загаданного числа и количества попыток.\r\nlet min = 1;\r\nlet max = 100;\r\nlet hiddenNumber;\r\nlet counter;\r\n\r\n// Получаем текущий рекорд.\r\nlet record = Number(localStorage.getItem(\"gameGTNRecord\"));\r\nif (!record) {\r\n\trecord = \"У вас пока нет рекорда.\";\r\n\trecordField.textContent = record;\r\n} else {\r\n\trecordField.textContent = `Ваш рекорд: ${record} попыток`;\r\n}\r\n\r\n// Функция, запрещающая ввод не чисел.\r\nconst filterInputsChar = (e) => {\r\n\tconst value = e.target.value;\r\n\tconst key = e.key;\r\n\r\n\tif (\r\n\t\t(key >= \"0\" && key <= \"9\" && value.length < 14) ||\r\n\t\tkey == \"Backspace\" ||\r\n\t\tkey == \"Tab\" ||\r\n\t\tkey == \"Enter\" ||\r\n\t\tkey == \"Delete\"\r\n\t) {\r\n\t\te.target.value = value;\r\n\t} else {\r\n\t\te.preventDefault();\r\n\t\treturn false;\r\n\t}\r\n};\r\n\r\n// Даем подсказку каждую третью неправильную попытку.\r\nfunction giveHint() {\r\n\tif (counter % 3 === 0) {\r\n\t\tif (hiddenNumber % 2 === 0) {\r\n\t\t\thint.textContent = \"Подсказка: число четное\";\r\n\t\t} else {\r\n\t\t\thint.textContent = \"Подсказка: число нечетное\";\r\n\t\t}\r\n\t} else {\r\n\t\thint.textContent = \"\";\r\n\t}\r\n}\r\n\r\n// Функция для рестарта игры.\r\nconst restartGame = () => {\r\n\t// Очищаем поля ввода.\r\n\tsetMin.value = \"1\";\r\n\tsetMax.value = \"100\";\r\n\tguessInput.value = \"\";\r\n\r\n\t// Отключаем поле и кнопку для угадывания.\r\n\tguessInput.disabled = true;\r\n\tguessButton.disabled = true;\r\n\r\n\t// Отключаем кнопку старта игры.\r\n\tstartButton.textContent = \"Начнем\";\r\n\tstartButton.onclick = startGame;\r\n\r\n\t// Отображаем текущее поле игры.\r\n\tstartingField.style.display = \"flex\";\r\n\tgame.style.display = \"none\";\r\n\r\n\t// Очищаем поля.\r\n\tresponse.textContent = \"\";\r\n\thint.textContent = \"\";\r\n\tattemptsCounter.textContent = \"Попыток: 0\";\r\n};\r\n\r\n// Функция для запуска игры.\r\nconst startGame = () => {\r\n\t// Получаем значения границ для загадываемого числа.\r\n\tmin = Number(setMin.value);\r\n\tmax = Number(setMax.value);\r\n\r\n\t// Проверяем и обрабатываем ввод пользователя.\r\n\tif (max < min) [min, max] = [max, min];\r\n\telse if (max === min) {\r\n\t\tresponse.textContent = \"Числа не должны быть равны\";\r\n\t\treturn;\r\n\t}\r\n\r\n\t// Получаем рандомное число в указанных границах.\r\n\thiddenNumber = Math.floor(Math.random() * (max - min + 1)) + min;\r\n\tconsole.log(hiddenNumber);\r\n\r\n\t// Обнуляем счетчик попыток.\r\n\tcounter = 0;\r\n\r\n\t// Отключаем кнопку старта игры.\r\n\tstartButton.textContent = \"Заново\";\r\n\tstartButton.onclick = restartGame;\r\n\r\n\t// Отображаем текущее поле игры.\r\n\tstartingField.style.display = \"none\";\r\n\tgame.style.display = \"flex\";\r\n\r\n\t// Активируем инпут для угадывания.\r\n\tguessInput.disabled = false;\r\n\tguessButton.disabled = false;\r\n\r\n\t// Очищаем поля ответа и подсказок.\r\n\tresponse.textContent = \"\";\r\n\thint.textContent = \"\";\r\n};\r\n\r\n// Функция для проверки попытки угадать.\r\nconst checkGuess = () => {\r\n\t// Получаем число от пользователя.\r\n\tconst guess = Number(guessInput.value);\r\n\r\n\t// Проверяем и обрабатываем ввод пользователя.\r\n\tif (guess < min || guess > max) {\r\n\t\tresponse.textContent = `Число должно быть от ${min} до ${max}!`;\r\n\t\treturn;\r\n\t} else {\r\n\t\tresponse.textContent = \"\";\r\n\t}\r\n\r\n\t// Увеличиваем счетчик попыток и обновляем его на странице.\r\n\tcounter += 1;\r\n\tattemptsCounter.textContent = `Попыток: ${counter}`;\r\n\r\n\t// Проверяем введенное число.\r\n\tif (guess === hiddenNumber) {\r\n\t\tresponse.textContent = \"Ты угадал!\";\r\n\t\t// Отключаем поле и кнопку для угадывания.\r\n\t\tguessInput.disabled = true;\r\n\t\tguessButton.disabled = true;\r\n\t\t// Очищаем поле подсказки\r\n\t\thint.textContent = \"\";\r\n\t\t// Обрабатываем рекорд.\r\n\t\tif (counter < record || typeof record === \"string\") {\r\n\t\t\tlocalStorage.setItem(\"gameGTNRecord\", `${counter}`);\r\n\t\t\trecordField.textContent = `Ваш рекорд: ${counter} попыток`;\r\n\t\t}\r\n\t} else if (guess < hiddenNumber) {\r\n\t\t// Даем подсказку.\r\n\t\tgiveHint();\r\n\t\tresponse.textContent = \"Загаданное число больше\";\r\n\t} else {\r\n\t\t// Даем подсказку.\r\n\t\tgiveHint();\r\n\t\tresponse.textContent = \"Загаданное число меньше\";\r\n\t}\r\n};\r\n\r\n// Добавляем обработчики событий на поля ввода цифр.\r\nsetMin.addEventListener(\"keydown\", filterInputsChar);\r\nsetMax.addEventListener(\"keydown\", filterInputsChar);\r\nguessInput.addEventListener(\"keydown\", filterInputsChar);\r\n\r\n// Кнопка начала игры.\r\nstartButton.onclick = startGame;\r\n\r\n// Кнопки проверки ответа.\r\nguessButton.addEventListener(\"click\", checkGuess);\r\n\r\n// Кнопки проверки ответа.\r\nresetRecord.addEventListener(\"click\", () => {\r\n\trecord = \"У вас пока нет рекорда.\";\r\n\trecordField.textContent = record;\r\n\tlocalStorage.removeItem(\"gameGTNRecord\");\r\n});\r\n\n\n//# sourceURL=webpack://simplegulp/./src/js/app.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The require scope
/******/ 	var __webpack_require__ = {};
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./src/js/app.js"](0, __webpack_exports__, __webpack_require__);
/******/ 	
/******/ })()
;